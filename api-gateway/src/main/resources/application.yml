spring:
  application:
    name: gateway

  zipkin:
    base-url: http://zipkin-service:9411/

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 1048508661293-ntkfklp1cd3vfoluhv13lip080r1uouo.apps.googleusercontent.com
            client-secret: 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
            scope: openid
            redirect-uri: http://localhost:8080/login/oauth2/code/google

  cloud:
    gateway:
      default-filters:
        - TokenRelay
        - LogFilter
      routes:
        - id: movie-service
          uri: lb://MOVIE-SERVICE
          predicates:
            - Path=/movies/**
          filters:
            - name: CircuitBreaker
              args:
                name: movieServiceCircuitBreaker
                fallbackUri: forward:/fallback/movieServiceFallBack
        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog/**
          filters:
            - name: CircuitBreaker
              args:
                name: catalogServiceCircuitBreaker
                fallbackUri: forward:/fallback/catalogServiceFallBack
        - id: series-service
          uri: lb://SERIES-SERVICE
          predicates:
            - Path=/series/**
          filters:
            - name: CircuitBreaker
              args:
                name: seriesServiceCircuitBreaker
                fallbackUri: forward:/fallback/seriesServiceFallBack

  config:
    import: optional:configserver:http://config-service:8888

  # Resilience4J configs for CircuitBreaker Pattern
resilience4j:
  circuitbreaker:
    instances:
      movieServiceCircuitBreaker:
        allowHealthIndicatorToFail: false
        registerHealthIndicator: true
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 5
        failueRateThreshold: 50
        waitDurationInOpenState: 50s
        permittedNumberOfCalssInHalfOpenState: 3
        automaticTransitionFromOpenToHalfIfOpenEnabled: true
      seriesServiceCircuitBreaker:
        allowHealthIndicatorToFail: false
        registerHealthIndicator: true
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 5
        failueRateThreshold: 50
        waitDurationInOpenState: 50s
        permittedNumberOfCalssInHalfOpenState: 3
        automaticTransitionFromOpenToHalfIfOpenEnabled: true
      catalogServiceCircuitBreaker:
        allowHealthIndicatorToFail: false
        registerHealthIndicator: true
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 5
        failueRateThreshold: 50
        waitDurationInOpenState: 50s
        permittedNumberOfCalssInHalfOpenState: 3
        automaticTransitionFromOpenToHalfIfOpenEnabled: true

  retry:
    instances:
      movieServiceCircuitBreaker:
        maxAttempts: 3
        waitDuration: 10s

        retryExceptions:
          - feign.FeignException$InternalServerError
          - org.springframework.web.client.HttpServerErrorException
          - java.util.concurrent.TimeoutException
          - java.io.IOException

      serieServiceCircuitBreaker:
        maxAttempts: 3
        waitDuration: 10s

        retryExceptions:
          - feign.FeignException$InternalServerError
          - org.springframework.web.client.HttpServerErrorException
          - java.util.concurrent.TimeoutException
          - java.io.IOException

      catalogServiceCircuitBreaker:
        maxAttempts: 3
        waitDuration: 10s

        retryExceptions:
          - feign.FeignException$InternalServerError
          - org.springframework.web.client.HttpServerErrorException
          - java.util.concurrent.TimeoutException
          - java.io.IOException

eureka:
  instance:
    hostname: ${spring.application.name}
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://eureka-service:8761/eureka/

info:
  app:
    name: ${spring.application.name}
    version: 1.0.0
    description: Gateway Service Application
  svc:
    port: ${server.port}